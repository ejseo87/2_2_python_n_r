# Py 7.1.1

import numpy as np
import matplotlib.pyplot as plt
import matplotlib as mpl

%matplotlib qt5  
# %matplotlib inline

x=np.random.randn(100)
y=np.random.randn(100)

plt.plot(y, 'b:')
plt.title('Green Solid Line')
plt.title('Blue Dotted Line')


plt.ioff()  # 비대화형 시작
plt.figure()
plt.plot(y, 'g-')
plt.title('Green Solid Line')
plt.show()


plt.ion()  # 다시 대화형 시작 

plt.figure()
h = plt.plot(y, 'g-')
plt.getp(h)
plt.setp(h, 'color','red')

plt.figure()

plt.plot(y, alpha=0.5, ls='-.', lw=3, marker='o',  
          mec='red', mew=2, mfc="blue", ms=10 )


# Py 7.1.2

%matplotlib inline

import numpy as np

z= np.arange(40)/20

plt.figure()
plt.plot(z,  z,  'g-', z, z*z, 'r:', z, z*z*z, 'b--' )


# Py 7.1.3

%matplotlib inline

plt.ioff()

x = np.linspace(0, 2, 100)

plt.figure()

plt.plot(x, x, label='linear')
plt.plot(x, x**2, label='quadratic')
plt.plot(x, x**3, label='cubic')

plt.xlim(-0.25,2.25)
plt.yticks([0,1,2,4,8])
plt.xlabel('x label')
plt.ylabel('y label')
plt.legend()
plt.grid(True)
plt.text(1.6,7, r'$y=x^3$')
plt.text(1.9,4.5, r'$y=x^2$')
plt.text(1.9,1.4, r'$y=x$')

plt.title("Simple Polynomials")
plt.show()

# Py 7.1.4

plt.style.available
plt.style.use('ggplot')

plt.ion()

x = np.linspace(0, 2, 100)

plt.figure()

plt.plot(x, x, label='linear')
plt.plot(x, x**2, label='quadratic')
plt.plot(x, x**3, label='cubic')

plt.xlim(-0.25,2.25)
plt.yticks([0,1,2,4,8])
plt.xlabel('x label')
plt.ylabel('y label')
plt.legend()
plt.grid(True)
plt.text(1.6,7, r'$y=x^3$')
plt.text(1.9,4.5, r'$y=x^2$')
plt.text(1.9,1.4, r'$y=x$')

plt.title("Simple Polynomials : 2")



# Py 7.1.5

%matplotlib qt5
plt.ion()

plt.figure(1)              
plt.subplot(211)          
plt.plot([1, 2, 3])
plt.subplot(212)          
plt.plot([4, 5, 6])

plt.figure(2)              
plt.plot([4, 5, 6])       

plt.figure(1)              
plt.subplot(211)            
plt.title('Test 1, 2, 3') 

# Py 7.1.6

x = np.linspace(0,1, 200)
y = np.sqrt(x)
fig = plt.figure()              
ax = fig.add_subplot(211)
ax.plot(x, y)          
ax = fig.add_subplot(212)
ax.plot(x, y)    


# Py 7.1.7

fig, ax = plt.subplots()
ax.plot(x,y)

fig, axs = plt.subplots(2)
axs[0].plot(x,y)
axs[1].plot(x,-y)

fig, (ax1, ax2) = plt.subplots(2)
ax1.plot(x, y)
ax2.plot(x, -y)


# Py 7.1.8


fig, axs = plt.subplots(2,2)
axs[0,0].plot(x,y)
axs[0,1].plot(x,-y)
axs[1,0].plot(x,y)
axs[1,1].plot(x,-y)

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2,2)
ax1.plot(x,y)
ax2.plot(x,-y)
ax3.plot(x,y)
ax4.plot(x,-y)

# Py 7.1.9

%matplotlib qt5
plt.style.use('ggplot')

z = np.linspace(-1, 1, 100)
w = np.sqrt(1- z**2)
xo = np.concatenate([z,z[::-1][1:100]])
yo = np.concatenate([w,-1*w[::-1][1:100]])

plt.ion()     
fig, axs = plt.subplots(2, 2, sharex='col', sharey='row',
                     gridspec_kw={'hspace': 0, 'wspace': 0} )
(ax1, ax2), (ax3, ax4) = axs
fig.suptitle('Sharing x per column, y per row')
ax1.plot(xo-1, yo)
ax2.plot(xo-1, yo-1, 'orange')
ax3.plot(xo+1, yo+1, 'green')
ax4.plot(xo+1, yo, 'red')


# 참고  np.concatenate 

a = np.array([[1, 2], [3, 4]])
b = np.array([[5, 6]])
np.concatenate((a, b), axis=0)
array([[1, 2],
       [3, 4],
       [5, 6]])
np.concatenate((a, b.T), axis=1)
array([[1, 2, 5],
       [3, 4, 6]])
np.concatenate((a, b), axis=None)
array([1, 2, 3, 4, 5, 6])


# Py 7.1.10

import scipy.stats as stats

%matplotlib qt5
plt.ion()
plt.style.use('ggplot')

xh = np.random.randn(4000)

fig = plt.figure()
ax = fig.add_subplot(111)

ax.hist(xh, bins=30, color='skyblue', rwidth=0.9, label='Empirical') 
xlim=ax.get_xlim()
ylim=ax.get_ylim()
xs = np.linspace(xlim[0],xlim[1],200)
dx = stats.norm.pdf(xs)
dx = dx*(ylim[1]/dx.max())
plt.plot(xs,dx, 'r-',label='PDF',color='orange')
ax.set_ylim((ylim[0], 1.2*ylim[1]))
plt.legend()
plt.text(1,320, r'normal density : $\phi(x)$')
plt.title("Histogram and Density")


# Py 7.1.11

%matplotlib qt5
plt.ion()

x = np.random.randn(1000)

fig = plt.figure()

plt.style.use('default')
ax1 = fig.add_subplot(121);  ax1.hist(x)

ax2 = fig.add_subplot(122);  ax2.hist(x);
ax2.set_facecolor('#E6E6E6')
ax2.set_axisbelow(True)
ax2.grid(color='w', linestyle='solid')

for spine in ax2.spines.values(): spine.set_visible(False)
      
ax2.tick_params(colors='gray', direction='out')

for tick in ax2.get_xticklabels(): tick.set_color('gray')
for tick in ax2.get_yticklabels(): tick.set_color('gray')

ax2.hist(x, edgecolor='#E6E6E6', color='#EE6666')


#Py 7.1.12

%matplotlib inline
plt.style.use('default')         

fig = plt.figure()     

plt.rc('axes',facecolor='grey')
ax =fig.add_subplot(121)
ax.hist(x)

plt.rcParams['axes.facecolor'] = 'pink'
ax =fig.add_subplot(122)
ax.hist(x)


# Py 7.1.13

r = np.arange(0, (2*np.pi), 0.01)
fig = plt.figure() 

plt.style.use('default')
ax=fig.add_subplot(121)
ax.plot(r, 1 + np.cos(4*r) ,'red')

plt.style.use('ggplot')
ax=fig.add_subplot(122, polar=True)
ax.plot(r, 1 + np.cos(4*r) , 'green') 


# Py 7.1.14

import matplotlib as mpl
import seaborn as sns

set.sns()

cm  = plt.get_cmap('rainbow',7)
cms = list()
for i in range(cm.N):
    rgb = cm(i)[:3] 
    cms.append(mpl.colors.rgb2hex(rgb))
   
print(cms)
sns.palplot(sns.color_palette(cms))


# Py 7.1.15

x = np.linspace(0, 10, 1000)
I = np.sin(x) * np.cos(x[:, np.newaxis])

def notick(): plt.xticks([]); plt.yticks([])

cm1  = plt.get_cmap('Blues')  
cm2  = plt.get_cmap('Blues',5) 
cm3  = plt.get_cmap('hsv',7)

fig = plt.figure(figsize=(19,6))

fig.add_subplot(131).imshow(I, cmap=cm1); notick() 
fig.add_subplot(132).imshow(I, cmap=cm2); notick() 
fig.add_subplot(133).imshow(I, cmap=cm3); notick() 

# Py 7.2.1

import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="darkgrid")
 
iris=sns.load_dataset("iris")     

iris.__class__    
# type(iris)

iris.columns
iris.columns =['sl','sw','pl','pw','sp']
iris.head()

g = sns.FacetGrid(iris, col="sp")
g = g.map(plt.hist, "sl")
        
sns.catplot(x="sp", y="sl", kind="boxen", data=iris)

sns.jointplot(x='sw', y='sl', data=iris,
               kind="kde", space=0,  color="g" )


g = sns.PairGrid(iris,hue='sp')
g.map_upper(plt.scatter)
g.map_lower(sns.kdeplot)
g.map_diag(sns.kdeplot, lw=3, legend=False)
          
sns.lmplot(x='sw', y='sl', data=iris)
sns.lmplot(x='sw', y='sl', hue='sp', data=iris)


# 7.3.1

library(ggplot2)
head(trees)
trees[c(1:2, 30:31),]

H = cut(trees$Height, 4)

ggplot(data=trees) +
      geom_point(aes(x=Girth, y=Volume)) +
      geom_point(aes(x=Girth, y=Volume, col=H))


head(mpg)

hwy_plot <- ggplot(data=mpg) +
            geom_point(
                mapping = aes(x=displ, 
                              y=hwy, color=class)
            )
hwy_plot

hwy_plot +
      geom_smooth( 
            mapping = aes(x=displ, y=hwy), 
            method='loess'
      )

hwy_plot +
      geom_smooth( 
            mapping = aes(x=displ, y=hwy, linestyle=drv), 
      method='loess'
      )      

hwy_plot +
      facet_grid(drv ~ cyl)




